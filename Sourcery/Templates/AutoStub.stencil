// swiftlint:disable line_length
// swiftlint:disable variable_name
{# Macro deffinitions #}
{% macro methodReturnName method %}{{ method.callName }}{% for param in method.parameters %}{{ param.name | upperFirstLetter }}{% endfor %}_returnValue{% endmacro %}
{# Macro End #}

import Foundation
{% for import in argument.imports %}
import {{ import }}
{% endfor %}

{% for protocol in types.protocols %}
{% if protocol.annotations.AutoStub %}
public protocol {{ protocol.name }}Stubbing {
{% for method in protocol.methods %}
    {% if method.returnTypeName | !contains: "Void" %}
    var {% call methodReturnName method %}: {% if method.throws %}Result<{% endif %}{{ method.returnTypeName }}{% if method.throws %}, Error>{% endif %} { get set }
    {% endif %}
{% endfor %}
}

public final class {{ protocol.name }}Stub: {{ protocol.name }}Stubbing {
{% for method in protocol.methods %}
    {% if method.returnTypeName | !contains: "Void" %}
    public var {% call methodReturnName method %}: {% if method.throws %}Result<{% endif %}{{ method.returnTypeName }}{% if method.throws %}, Error>{% endif %} = .default
    {% endif %}
{% endfor %}

    public init() {}
}

extension {{ protocol.name }}Stub: {{ protocol.name }} {
{% for method in protocol.methods %}
    public func {{ method.name }}{% if method.throws %} throws{% endif %} -> {{ method.returnTypeName }} {
        {% if method.returnTypeName | !contains: "Void" %}
        {% if method.throws %} 
        switch {% call methodReturnName method %} {
        case let .success(value):
            return value
        case let .failure(error):
            throw error
        }
        {% else %}
        {% call methodReturnName method %}
        {% endif %}
        {% endif %}
    }

{% endfor %}
}

{% endif %}
{% endfor %}