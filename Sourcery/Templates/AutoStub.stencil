{# Macro deffinitions #}
{% macro variableName variable -%}{{ variable.name }}_returnValue{% endmacro %}
{% macro methodReturnName method -%}
{{ method.callName }}
{%- for param in method.parameters -%}
{{ param.name | upperFirstLetter }}
{%- endfor -%}_returnValue
{%- endmacro -%}
{% macro methodReturnType method -%}
{% if method.throws -%}
Result<{{ method.returnTypeName }}, Error>
{%- else -%}
{{ method.returnTypeName }}
{%- endif -%}
{%- endmacro -%}

{% macro methodReturnNameAndType method -%}
{%- if method.isGeneric -%}
{%- call methodReturnName method -%}: (any Decodable)?
{%- else -%}
{% call methodReturnName method %}: {% call methodReturnType method %}
{%- endif -%}
{%- endmacro -%}

{# Macro End #}
{% for protocol in types.protocols %}
{% if protocol.annotations.AutoStub %}
// sourcery:file:{{ protocol.name }}+Stub
// swiftlint:disable line_length
// swiftlint:disable variable_name    
import Foundation
{% for import in argument.imports %}
import {{ import }}
{% endfor %}

public protocol {{ protocol.name }}Stubbing {
{% for variable in protocol.variables %}
    var {% call variableName variable %}: {{ variable.typeName }} { get set }
{% endfor %}
{% for method in protocol.methods %}
    {% if method.returnTypeName.name == "Void" %}
    {% if method.throws %}
    var {% call methodReturnName method %}: Error? { get set }
    {% endif %}
    {% else %}
    var {% call methodReturnNameAndType method %} { get set }
    {% endif %}
{% endfor %}
}

public final class {{ protocol.name }}Stub: {{ protocol.name }}Stubbing {
{% for variable in protocol.variables %}
    public var {% call variableName variable %}: {{ variable.typeName }} = .default
{% endfor %}
{% for method in protocol.methods %}
    {% if method.returnTypeName.name == "Void" %}
    {% if method.throws %}
    public var {% call methodReturnName method %}: Error? = nil
    {% endif %}
    {% else %}
    {% if method.isOptionalReturnType %}
    public var {% call methodReturnNameAndType method %} = nil
    {% else %}
    public var {% call methodReturnNameAndType method %} = .default
{% endif %}
    {% endif %}
{% endfor %}

    public init() {}
}

extension {{ protocol.name }}Stub: {{ protocol.name }} {
{% for variable in protocol.variables %}
    public var {{ variable.name }}: {{ variable.typeName }} { {% call variableName variable %} }
{% endfor %}
{% for method in protocol.methods %}
    public func {{ method.name }}{% if method.isAsync %} async{% endif %}{% if method.throws %} throws{% endif %} -> {{ method.returnTypeName }} {
        {% if method.returnTypeName.name == "Void" %}
        {% if method.throws %}
        if let {% call methodReturnName method %} {
            throw {% call methodReturnName method %}
        }
        {% endif %}
        {% else %}
        {% if method.throws %} 
        switch {% call methodReturnName method %} {
        case let .success(value):
            return value
        case let .failure(error):
            throw error
        }
        {% else %}
        {%- if method.isOptionalReturnType and method.isGeneric -%}
        {% call methodReturnName method %} as? {{ method.unwrappedReturnTypeName }}
        {%- else -%}
        {% call methodReturnName method %}
        {%- endif -%}
        {% endif %}
        {% endif %}
    }

{% endfor %}
}
// sourcery:end
{% endif %}
{% endfor %}